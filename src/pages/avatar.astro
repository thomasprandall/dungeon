---
import Layout from '../layouts/Layout.astro';
import Window from '../layouts/Window.astro';
import StatInput from '../components/form/StatInput.astro';
import SkillInput from '../components/form/SkillInput.astro';

const stats = ["build","presence","tilt","meta","hands","rng"];
const backpack = ["supplies","materials","quivers","mags","cells"];
const backpackOptions = "<option value='0'>0</option><option value='1'>1</option><option value='2'>2</option><option value='3'>3</option><option value='4'>4</option><option value='5'>5</option>";

import * as data from '../data/appendix.json';
import * as magicData from '../data/magic.json';

const { skills } = data;
const { spells } = magicData;
---

<!-- 
    TODO
    Look into restyling checkboxes now that they are functional
    Add validation to Stat boxes to restrict to dice values and not allow duplicates (d20, d12, d10, d8, d6, and d4)
-->
<Layout title="Avatar Manager">
  <section>
    <form id="avatar-form">
        <div class="text-center bg-red-300 p-2 flex flex-row justify-center items-center">
            <!-- <svg viewBox="-0.5 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-10">
                <g stroke-width="0"></g>
                <g stroke-linecap="round" stroke-linejoin="round"></g>
                <g> 
                    <path d="M10.8809 16.15C10.8809 16.0021 10.9101 15.8556 10.967 15.7191C11.024 15.5825 11.1073 15.4586 11.2124 15.3545C11.3175 15.2504 11.4422 15.1681 11.5792 15.1124C11.7163 15.0567 11.8629 15.0287 12.0109 15.03C12.2291 15.034 12.4413 15.1021 12.621 15.226C12.8006 15.3499 12.9399 15.5241 13.0211 15.7266C13.1024 15.9292 13.122 16.1512 13.0778 16.3649C13.0335 16.5786 12.9272 16.7745 12.7722 16.9282C12.6172 17.0818 12.4204 17.1863 12.2063 17.2287C11.9922 17.2711 11.7703 17.2494 11.5685 17.1663C11.3666 17.0833 11.1938 16.9426 11.0715 16.7618C10.9492 16.5811 10.8829 16.3683 10.8809 16.15ZM11.2408 13.42L11.1008 8.20001C11.0875 8.07453 11.1008 7.94766 11.1398 7.82764C11.1787 7.70761 11.2424 7.5971 11.3268 7.5033C11.4112 7.40949 11.5144 7.33449 11.6296 7.28314C11.7449 7.2318 11.8697 7.20526 11.9958 7.20526C12.122 7.20526 12.2468 7.2318 12.3621 7.28314C12.4773 7.33449 12.5805 7.40949 12.6649 7.5033C12.7493 7.5971 12.813 7.70761 12.8519 7.82764C12.8909 7.94766 12.9042 8.07453 12.8909 8.20001L12.7609 13.42C12.7609 13.6215 12.6809 13.8149 12.5383 13.9574C12.3958 14.0999 12.2024 14.18 12.0009 14.18C11.7993 14.18 11.606 14.0999 11.4635 13.9574C11.321 13.8149 11.2408 13.6215 11.2408 13.42Z" fill="#000000"></path> <path d="M12 21.5C17.1086 21.5 21.25 17.3586 21.25 12.25C21.25 7.14137 17.1086 3 12 3C6.89137 3 2.75 7.14137 2.75 12.25C2.75 17.3586 6.89137 21.5 12 21.5Z" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> 
                </g>
            </svg> -->
            <p class="ml-2 align-middle">
                This interface does NOT save avatar information at this time. Please don't hurt me by hurting yourselves and thinking this shit works right now
            </p>
        </div>
        <div class="flex flex-wrap items-start justify-center">
        <Window title="STATS" classes="basis-full sm:basis-auto"> 
            <div class="window-pane columns-2 gap-8 p-8">
                {
                    stats.map((stat) => <StatInput name={stat}/>)
                }
            </div>
        </Window>
        <Window title="SYNC" classes="basis-full md:basis-auto">
            <div class="window-pane">
                <div class="columns-2 gap-0">
                    <div class="w-1/6 h-64">
                        <input type="range" min="0" max="100" class="h-64" step="1" list="sync" value="100" orient="vertical" name="sync" id="sync-input" />
                    </div>
                    <datalist id="sync" class="w-full sm:-ml-24 md:-ml-12 h-64">
                        <option value="100" label="100 rest //return "></option>
                        <option value="80" label="80 rest"></option>
                        <option value="60" label="60 rest // return"></option>
                        <option value="40" label="40 rest"></option>
                        <option value="20" label="20 rest // return"></option>
                        <option value="0" label="00 game over"></option>
                    </datalist>
                </div>
                <h1 id="sync-output" class="text-center"></h1>
                <div class="text-center flex flex-wrap items-start justify-around">
                    <button class="btn large mr-2" id="rest">Rest (d20)</button>
                    <button class="btn large" id="healing-foil">Use Healing Foil (d6)</button>
                </div>
            </div>
        </Window>
        <Window title="AVATAR" classes="basis-full md:basis-auto">
            <div class="window-pane">
                <div class="field-row">
                    <label for="name" class="w-20">// NAME: </label> <input type="text" name="name" id="name" />
                </div>
                <div  class="field-row">
                    <label for="name" class="w-20">// JOB: </label> <input type="text" name="job" id="job" />
                </div>
                <div class="field-row">
                    <span class="mr-2">Respawns</span>
                    <input type="checkbox" name="re-1">
                    <label>&nbsp;</label>
                
                    <input id="checkbox2" type="checkbox" name="re-2">
                    <label for="checkbox2">&nbsp;</label>
                
                    <input id="checkbox3" type="checkbox" name="re-3">
                    <label for="checkbox3">&nbsp;</label>
                </div>
                <div  class="field-row">
                    <button type="button" id="save">Save Avatar</button>
                </div>
            </div>
        </Window>
        <Window title="SKILLS" classes="basis-full md:basis-auto">
            <div class="window-pane md:columns-2 text-center">
                <div class="mb-2">
                    <h1 class="uppercase">Build</h1>
                    <ol>
                        {skills.build.map((skill) => <SkillInput name={skill.name} />)}
                    </ol>
                </div>
                <div class="mb-2">
                    <h1 class="uppercase">Presence</h1>
                    <ol>
                        {skills.presence.map((skill) => <SkillInput name={skill.name} />)}
                    </ol>
                </div>
                <div class="mb-2">
                    <h1 class="uppercase">Meta</h1>
                    <ol>
                        {skills.meta.map((skill) => <SkillInput name={skill.name} />)}
                    </ol>
                </div>
                <div class="mb-2">
                    <h1 class="uppercase">Hands</h1>
                    <ol>
                        {skills.hands.map((skill) => <SkillInput name={skill.name} />)}
                    </ol>
                </div>
            </div>
        </Window>
        <Window title="Backpack" classes="basis-full md:basis-auto">
            <div class="m-2 text-sm">
                <label class="mr-2" for="bytes">* bytes *</label> <input type="text" name="bytes" id="bytes" class="text-base" />
            </div>
            <div class="h-64">
                <textarea name="Backpack" class="w-full h-full"></textarea>
            </div>
            <div class="m-2 text-sm text-right">
                <label class="mr-2 text-xs" for="weapon">// weapon</label> <input type="text" name="weapon" id="weapon" size="10" class="text-base" />
                <label class="text-xs" for="damage">*dmg type*[</label> <input type="text" name="damage" id="damage" size="5" class="text-base" />]
            </div>
            <div class="m-2 text-xs">
                <ul class="list-none text-right">
                {
                    backpack.map((supply) => <li>*{supply}* <select class="w-10" name={supply} set:html={backpackOptions}></select></li>)
                }
                </ul>
            </div>
        </Window>
        <Window title="ROLES" classes="basis-full md:basis-auto"> 
            <div class="window-pane">
                <div class="columns-2">
                    <div>
                        <textarea name="role-1" class="w-48 aspect-square resize-none text-sm"></textarea>
                    </div>
                    <div>
                        <textarea name="role-2" class="w-48 aspect-square resize-none text-sm"></textarea>
                    </div>
                    <div>
                        <textarea name="role-3" class="w-48 aspect-square resize-none text-sm"></textarea>
                    </div>
                    <div>
                        <textarea name="role-4" class="w-48 aspect-square resize-none text-sm"></textarea>
                    </div>
                </div>
            </div>
        </Window>
        <div class="basis-full md:basis-auto">
            <Window title="PET" classes=""> 
                <div class="window-pane">
                    <div class="m-2 text-sm text-right">
                        <label class="mr-2" for="weapon">// name</label> <input type="text" name="pet-name" id="pet-name" size="10" class="text-base" />
                        <label class="ml-2" for="damage">*upkeep*[</label> <input type="text" name="pet-upkeep" id="pet-upkeep" size="5" class="text-base" />]
                    </div>
                    <div>
                        <textarea name="pet-notes" class="resize-none text-sm w-full"></textarea>
                    </div>
                </div>
            </Window>
            <Window title="TRANSPORT"> 
                <div class="window-pane">
                    <div class="m-2 text-sm text-right">
                        <label class="mr-2" for="weapon">// type</label> <input type="text" name="transport-type" id="transport-type" size="10" class="text-base" />
                        <label class="ml-2" for="damage">*upkeep*[</label> <input type="text" name="transport-upkeep" id="transport-upkeep" size="5" class="text-base" />]
                    </div>
                    <div>
                        <textarea name="transport-notes" class="resize-none text-sm w-full"></textarea>
                    </div>
                </div>
            </Window>
            </div>
            <Window title="SPELLS" classes="basis-full md:basis-auto"> 
                <div class="window-pane">
                    <ul class="list-none">
                        <li class="mb-2">|name: <select class="spell-select" name="spell-1">{ spells.map((spell) => <option value={spell.name} data-cost={spell.cost}>{spell.name}</option>) }</select> [<input name="spell-cost-1" class="w-10 text-center" disabled />]</li>
                        <li class="mb-2">|name: <select class="spell-select" name="spell-2">{ spells.map((spell) => <option value={spell.name} data-cost={spell.cost}>{spell.name}</option>) }</select> [<input name="spell-cost-1" class="w-10 text-center" disabled />]</li>
                        <li class="mb-2">|name: <select class="spell-select" name="spell-3">{ spells.map((spell) => <option value={spell.name} data-cost={spell.cost}>{spell.name}</option>) }</select> [<input name="spell-cost-1" class="w-10 text-center" disabled />]</li>
                    </ul>
                </div>
            </Window>
        </div>
    </form>
  </section>
</Layout>

<script>
    const heal = function(max){
        let amt = Math.ceil(Math.random() * max);
        let syncInput = document.getElementById('sync-input') as HTMLInputElement;
        let syncTotal = (Number(syncInput.value) + Number(amt)).toString();
        syncInput.value = syncTotal;
        updateSyncLabel(syncTotal);
    };

    const updateSyncLabel = function(sync){
        document.getElementById('sync-output').innerText = sync;
    }

    document.getElementById('sync-input').addEventListener('change', () => {
        updateSyncLabel((document.getElementById('sync-input') as HTMLInputElement).value);
    });

    document.getElementById('rest').addEventListener('click', () => {
        heal(20);
    });

    document.getElementById('healing-foil').addEventListener('click', () => {
        heal(6);
    });

    const validValues = [4,6,8,10,12,20];

    document
    .querySelectorAll('input.stat-field')
    .forEach(function (elem) {
        let input = elem as HTMLInputElement;
        input.addEventListener('change', function(){
            if(!validValues.includes(Number(input.value))){
                input.value = '';
                input.setCustomValidity("Invalid Value");
            } else {
                input.setCustomValidity('');
            }
        });
        if(!input.value){
            input.setCustomValidity("Invalid Value");
        }
    });

    updateSyncLabel((document.getElementById('sync-input') as HTMLInputElement).value);

    document
    .querySelectorAll('select.spell-select')
    .forEach(function (elem) {
        elem.addEventListener('change', function(){
            let select = elem as HTMLSelectElement;
            let cost = select.options[select.selectedIndex].dataset.cost;
            let selectedOption = select.parentNode.childNodes[3] as HTMLInputElement;
            selectedOption.value = cost;
        });
    });

    let avatarForm = document.getElementById('avatar-form');

    const saveAvatarByName = function(data){
        let avatars = JSON.parse(localStorage.getItem('avatars'))||{};
        let updateLinks = Object.keys(avatars).length == 0 || !(data.name.replaceAll(',',', ').toLowerCase() in avatars);

        avatars[data.name.replaceAll(',',', ').toLowerCase()] = data;
        localStorage.setItem('avatars', JSON.stringify(avatars));

        if(updateLinks){
            addAvatarMenuLink(data.name);
        }
        
    };

    const addAvatarMenuLink = function(name){
        let avatarUL = document.getElementById('avatar-menu');
        let baseNode = document.createElement("li");
        baseNode.classList.add('menu-item');
        baseNode.role = "menuitem";

        avatarUL.appendChild(baseNode).innerHTML = "<a href='/avatar?a=" + name.replaceAll(',',', ').toLowerCase() + "'>" + name.toLocaleUpperCase() + "</a>";
    }

    document.getElementById('save').addEventListener('click', function(e){
        const formData = new FormData(avatarForm as HTMLFormElement);
        let data = {};
        for (const [key, value] of formData) {
            data[key] = value;
        }

        saveAvatarByName(data);
    });

    const loadAvatarByName = function(name){
        let avatars = JSON.parse(localStorage.getItem('avatars'));

        if(avatars && Object.keys(avatars[name]).length){
            const { elements } = document.querySelector('form')

            for (const [ key, value ] of Object.entries(avatars[name]) ) {
                const field = elements.namedItem(key) as HTMLInputElement;
                field.value = value.toString();
                field.dispatchEvent(new Event("change"));
            }
        }
    };

    avatarForm.addEventListener('submit', function(e){
        e.preventDefault();
    });

    const loadAvatar = new URLSearchParams(window.location.search).get("a")||false;

    if(loadAvatar){
        loadAvatarByName(loadAvatar);
    }
</script>
